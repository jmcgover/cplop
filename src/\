import java.util.*;

public class Meanwise extends Classifier<Isolate, Phylogeny, Species> {
      ArrayList<ListEntry<Isolate, Double>> neighbors;
   public Meanwise(Isolate unknown, Phylogeny library) {
      super(unknown, library);
      neighbors = compare(unknown, library);
   }

   public ArrayList<ListEntry<Isolate, Double>> compare(Isolate unknown, Phylogeny library) {
      Collection<Isolate>                    allIsolates;
      ArrayList<ListEntry<Isolate, Double>>  neighbors;
      Similarities<Isolate, Double>          similarities;
      ArrayList<Double>                      results;

      allIsolates    = library.getAllIsolates().values();
      neighbors      = new ArrayList<ListEntry<Isolate, Double>>(allIsolates.size());
      similarities   = new PearsonIsolate();

      for (Isolate i : library.getAllIsolates().values()) {
         results = new ArrayList<Double>(similarities.getSimilarities().size());
         for (SimilarityMetric<Isolate, Double> sim : similarities.getSimilarities()) {
            results.add(sim.similarity(unknown, i));
         }
         neighbors.add(new ListEntry<Isolate, Double>(i, mean(results), -1));
      }
      return neighbors;
   }

   public Species classify(Integer k, Double alpha){
      return null;
   }

   public Double mean(List<Double> vals) {
      return arithmeticMean(vals);
   }

   public Double arithmeticMean(List<Double> vals) {
      Double sum = 0.0;
      for (Double val : vals) {
         sum += val;
      }
      return sum / (Double)(vals.size());
   }
}
